#!/usr/bin/env python

import time

import numpy as np
import cv2

import rospy
from sensor_msgs.msg import CameraInfo, CompressedImage
from scipy.interpolate import UnivariateSpline
from localization.msg import Floats

from image_geometry import PinholeCameraModel

from dt_communication_utils import DTCommunicationGroup

group = DTCommunicationGroup('my_map', Floats)

LOW_RES=True

# TODO: Find a better way to store this map
map_data = [1.814209762311546, 1.7983292984927624, 1.820761247077294, 1.8198634349294882, 1.8109766707075126, 1.8311688901879482, 1.8125001043986482, 1.8467457178733273, 1.8008821266275963, 1.8952593358820402, 1.8176341054760896, 1.9113939017569832, 1.813401670465181, 1.9222063176755926, 1.8087966103846906, 1.932966430349738, 1.7974258872617244, 1.9436485458875354, 1.7966729077806443, 1.9921580354787618, 1.7907688927087428, 2.0027955139220923, 1.796319635207553, 2.016020350827893, 1.7897118807598185, 2.0644357430882203, 1.784743939983173, 2.078820863078702, 1.7871459111172252, 2.08916299476932, 1.7871902651449583, 2.0972690295774754, 1.7869918644520946, 2.1052493293010515, 1.777941955175859, 2.15351003424121, 1.7758327520510901, 2.1678486423502914, 1.7718429836697631, 2.1817291783849697, 1.7757786717741177, 2.221992048973799, 1.7787447408048451, 2.2306359857105007, 1.7794536921799358, 2.238829009604694, 1.7667334868949183, 2.239844206629486, 1.7796894907167677, 2.260994329848131, 1.770220721358359, 2.261766079467061, 1.7688773738475407, 2.30929707882206, 1.773021210017717, 2.320388704622728, 1.763152570780216, 2.3205848416789867, 1.7652116159390865, 2.3344219475770673, 1.7543468442654604, 2.343971337525408, 1.7650114813595286, 2.3771224357819385, 1.754910884762294, 2.3712840570585776, 1.7559723547737363, 2.3777201201370928, 1.76283597044532, 2.3898679063604944, 1.7531781470127992, 2.385407455471178, 1.766495890045358, 2.406583241767357, 1.7598975971345123, 2.4041973000403063, 1.7529980603151667, 2.401127468992911, 1.7497329182392813, 2.4384987634305997, 1.7508246794643, 2.4570467561687104, 1.7473359345338213, 2.4679190012685965, 1.759716756343818, 2.493139591278787, 1.7519004463037888, 2.490940290107739, 1.7554616700343169, 2.534522369075587, 1.736693608839428, 2.5574064747696537, 1.729006761264514, 2.6109034025776934, 1.72424221155698, 2.616819589556453, 1.7248637243123013, 2.6307836032986143, 1.7030901443899618, 2.655873497091676, 1.705512009012474, 2.6864350768144076, 1.6919701501500324, 2.6814128889944016, 1.6914340826614394, 2.696736991087977, 1.6839590274807577, 2.7009537969521147, 1.6566234201476024, 2.7418619017418577, 1.6383641830073306, 2.757585735229246, 1.61757011084389, 2.777760713816659, 1.5993939826565329, 2.771352341975462, 1.590608621221903, 2.771760970379472, 1.5628048418379308, 2.778244057411248, 1.5442199600346833, 2.7701367827439003, 1.5327596681869788, 2.773868776042393, 1.5252992615955965, 2.7792572605229244, 1.4829799405555808, 2.7702169609169043, 1.4411421459680978, 2.7691909650156874, 1.423458594211013, 2.772914012764456, 1.3924832863891177, 2.82209652465903, 1.3793252546947885, 2.8322669132359537, 1.3756050846649106, 2.8400800698958513, 1.3657487545004383, 2.840907921309364, 1.33834549602515, 2.8539961086363017, 1.3302714718353699, 2.9030454946567845, 1.3049420138601708, 2.9286577983401165, 1.2941988798693256, 2.9523900833118923, 1.2740266982987913, 2.9832272421210497, 1.270626283867774, 2.980394699239091, 1.2672304236622458, 2.967016183347617, 1.2667561281164308, 3.052063711456832, 1.2650933634800612, 3.000420119394258, 1.2638615575351535, 3.013744578667261, 1.260432343219523, 3.01018044071934, 1.2604192430703296, 3.114619858466306, 1.2570166680513104, 3.0256150624125584, 1.2537987347413477, 3.0373094030577468, 1.257035180264727, 3.138612297543115, 1.2536773891031674, 3.021088043675477, 1.2536405117071576, 3.1242792165638216, 1.2502390019303815, 3.1322384485313974, 1.2453415595791475, 3.1187930871486715, 1.2405182783624484, 3.171955947934219, 1.1961534922655856, 3.246368406897455, 1.1496501243910577, 3.290758470738628, 1.1247757889635586, 3.306041870757811, 1.0844246909012978, 3.34355467330414, 1.0200012479677436, 3.365066656242065, 0.9669667290376203, 3.354368230825141, 0.9070690576450173, 3.3440310890451714, 0.8509739280498655, 3.354803965127364, 0.8118262752673948, 3.344625736250187, 0.760115436616352, 3.3341407784447386, 0.6998391678777772, 3.3434832345140633, 0.6363459098700636, 3.3388007258449233, 0.5830388629731454, 3.333222672343523, 0.543295673462845, 3.326451071054388, 0.4856812663388626, 3.316781734686887, 0.44179149915057014, 3.278823215493711, 0.4077808820437231, 3.2214285474005253, 0.386843938816014, 3.1657410796456156, 0.35635750650911063, 3.1152940288150934, 0.33288286292557434, 3.0475678667227144, 0.3318479980950349, 3.0150154094727744, 0.34549897191068357, 2.960818608377553, 0.3431612782939794, 2.909755432130343, 0.3337788222541701, 2.8271764329000484, 0.34752417085969134, 2.783316544460057, 0.3355755465142759, 2.752436216161716, 0.3330932339726425, 2.7346630355076877, 0.3358187372135517, 2.6811541838187956, 0.3487289254566466, 2.5876648805558444, 0.34653069065024594, 2.5251979187880935, 0.33825702007047265, 2.467592086100288, 0.3461649340165556, 2.3827281645126748, 0.349649279515278, 2.2990932605779095, 0.35118114477982043, 2.2279244374134586, 0.36747805721692023, 2.1376408577335595, 0.35542349765688813, 2.0846398247607105, 0.35307410364700537, 2.026805021158693, 0.3625268294312844, 1.96699520678242, 0.3638778500994585, 1.8870440518011509, 0.36084473096947856, 1.813775673185646, 0.3838775053374701, 1.7014229980617728, 0.3891177382624183, 1.6187096001134773, 0.38174077576832766, 1.5789604030199205, 0.37441870054336523, 1.491153031744488, 0.38391656356841086, 1.4654709180368972, 0.39095029677089493, 1.4275992700774847, 0.3910345564217817, 1.3618949447486348, 0.4030850757644555, 1.2839044637259172, 0.40771257246124604, 1.1899144019869816, 0.4136897225997426, 1.1330936576707233, 0.41737476187368655, 1.073746491039583, 0.41148223136160594, 0.9894024879663632, 0.4092145972127543, 0.9434569361951771, 0.4214096696844489, 0.9481714104897003, 0.4230869624130357, 0.9164437003044011, 0.41255598992724263, 0.8436396109225615, 0.41440745855030087, 0.7588160484933366, 0.41622237872896817, 0.7513604749902125, 0.42933664390186466, 0.7621775834943773, 0.41388983145558994, 0.738802523304589, 0.4277722132345679, 0.7394304187390645, 0.4411697162679579, 0.7335040711715666, 0.4443664858030173, 0.6824812937823158, 0.46704112404664844, 0.6505847756966833, 0.4857942042379503, 0.6105620191626823, 0.5022828658029987, 0.6128040311325619, 0.5210456470372032, 0.6065006667827917, 0.5434686646605139, 0.6022422925935426, 0.5468294491495213, 0.5970140631496569, 0.5597517715293829, 0.5965766465568344, 0.5600542219775853, 0.572953655124695, 0.5871255204526057, 0.5857665837117172, 0.5809568749256664, 0.559960279428738, 0.6368804458251013, 0.5916027870694583, 0.6487674993007326, 0.5866560096501696, 0.6813316813668223, 0.5910890965546407, 0.7150490677130046, 0.5860950813079515, 0.721434283494382, 0.5968740734063641, 0.7178161772837329, 0.5763604723368476, 0.7501218642512733, 0.59321406434156, 0.7791428753172165, 0.6097107391828835, 0.8357023175887486, 0.6303392456533746, 0.8664240717650455, 0.6350954835824172, 0.8939932463957685, 0.6305878334845542, 0.9051498022251052, 0.6368871805860316, 0.9171049205672479, 0.6462489673095573, 0.925490733500041, 0.6446880650780391, 0.9515072533584866, 0.6460191814967043, 0.9546004441739306, 0.6349136102129231, 0.958053506486229, 0.6409759467951855, 0.9756244794373792, 0.6572434194157498, 1.0124243217425748, 0.6730369833427505, 1.0192312759408722, 0.6679821351756348, 1.022198959612829, 0.6625795518867866, 1.0333094483053085, 0.673231116976628, 1.0611929518261816, 0.6788387877904934, 1.10081673323251, 0.6889379364312286, 1.1212052876384, 0.6912850402935878, 1.1517414707600586, 0.6963040170572431, 1.1666282241095138, 0.7019126362488702, 1.2106778052274392, 0.7063623267051033, 1.2229692384532787, 0.7153286629056962, 1.2419219049413956, 0.7182849928043479, 1.2537543220369944, 0.6952466428241281, 1.2764216517432632, 0.7256273118358566, 1.2859747884015291, 0.7348852879492023, 1.2955899196224385, 0.734258257690261, 1.315212396291517, 0.7535388701720871, 1.3280255799536769, 0.7594970849684018, 1.3428163938374855, 0.7744931036374417, 1.3658766580451362, 0.8186377051364885, 1.3725327897104214, 0.8250315530806241, 1.375970749625299, 0.8183333166956696, 1.380039612380979, 0.8218898218679821, 1.391473695196863, 0.8419827877716071, 1.4010367262826886, 0.8739668018434671, 1.4095145646437701, 0.8752133100645536, 1.405755408085961, 0.9027309604463689, 1.4099459575610838, 0.8935917091202347, 1.412949041589063, 0.8895915974352664, 1.412591444007958, 0.8972253113027865, 1.4103796002129632, 0.912876896434723, 1.4157755205831157, 0.8985156704677707, 1.4198882958002264, 0.8897114500992171, 1.416727054581667, 0.9153753565157173, 1.4186634468646027, 0.9228629254767062, 1.4163019912194235, 0.9390259740856474, 1.4141163781338408, 0.9546607141795148, 1.4191643597397197, 0.9388104739624507, 1.413727283892319, 0.9717869024655852, 1.415409489512011, 0.9825343637904052, 1.4144105115280112, 0.9960063678084716, 1.4166389199780653, 0.9961185702009464, 1.4165255658670255, 1.0076122757687684, 1.4201153914150022, 1.0068228773600953, 1.4138393871206962, 1.0328219462408708, 1.4173324772936269, 1.0259919070644596, 1.426234879931399, 0.9983464849598013, 1.4231454859259405, 1.0160299476492427, 1.4117990582024509, 1.059234665128145, 1.4179776184845614, 1.0359103981152855, 1.414085476139672, 1.056526836597707, 1.4128973458806855, 1.060709837224423, 1.4252980275586975, 1.0192289190872885, 1.4187206948564144, 1.0501934610968446, 1.4166982512208193, 1.0661323397493059, 1.4087092539631396, 1.1016187031465547, 1.4165394970735037, 1.0772787449673074, 1.4175055094883937, 1.0796996689691147, 1.4194646841040404, 1.0746295009878357, 1.4179035985986113, 1.080785965824439, 1.4178247521797602, 1.0860970214228614, 1.4239569100429448, 1.0703603944469877, 1.4204135895998005, 1.0866562026608741, 1.4149013258429313, 1.1094926159471266, 1.4090328498916262, 1.1335120327382606, 1.4142535434695616, 1.120091381229674, 1.4268585445826962, 1.0823230626080473, 1.4140109074318503, 1.1284735023111911, 1.4129025620895734, 1.1396097867833874, 1.4077632461879808, 1.1645186523331956, 1.4196757041671586, 1.1328498777513172, 1.4157548577472148, 1.1574256368125144, 1.4163899873318169, 1.1623999078744391, 1.4198323062923044, 1.1579728416621602, 1.4187796045237688, 1.167279828536786, 1.416334045618071, 1.1807116095842065, 1.410880714877688, 1.2031696410921477, 1.4163218355424902, 1.2050263471710527, 1.4162775977002482, 1.222758560797257, 1.4175216104654398, 1.2360912296663937, 1.4212053642242126, 1.236161763524215, 1.430839872885375, 1.2809774899635045, 1.434137303354823, 1.2967662608233568, 1.4402926697365168, 1.2930958024761754, 1.4441798632560956, 1.2974731604568985, 1.4437912138389335, 1.3024278223328942, 1.452965461589613, 1.2944680263814996, 1.4470905331567336, 1.3265340654994928, 1.467645543992738, 1.372634681960257, 1.4773470066266705, 1.3791256245155532, 1.487684338500866, 1.3790719777939797, 1.4841483609540376, 1.3970968768078857, 1.5056516821680321, 1.431306112740498, 1.5141239170323844, 1.4394587693840268, 1.5315767961192697, 1.438305435694357, 1.5390765612369026, 1.4642407323928435, 1.5431081293583835, 1.4804651752875, 1.5762134257231273, 1.4743768623104234, 1.581226818319161, 1.4961734484806632, 1.5899541751693265, 1.4967147429552679, 1.5946877315864365, 1.501730315760277, 1.6092640634839466, 1.5050966064784483, 1.647617513382453, 1.5077073459599415, 1.6471178399309572, 1.513546928346811, 1.6708343919775037, 1.5167080538280064, 1.6840156372725577, 1.5218601559609233, 1.6851412667062857, 1.5291982720260975, 1.7085092891740645, 1.523862052893494, 1.7094264725225203, 1.5306785497583453, 1.7187612049406054, 1.5374041254212827, 1.738607818553521, 1.5402666341569569, 1.7424793111154555, 1.5454491125999854, 1.7521462719209566, 1.559836585740369, 1.7601105321720145, 1.5829564945749608, 1.7879375532625406, 1.620783393454349, 1.8171588740622684, 1.6636753466710268, 1.8174303579802502, 1.7092119477199725, 1.8209893848631928, 1.75557266573766, 1.8176073519894131, 1.7767927929778287]

def sort_xy(x, y, return_origin=False):
    """
    Sort by angle

    :param return_origin: If true returns also the computed origin
    """

    x0 = np.mean(x)
    y0 = np.mean(y)

    r = np.sqrt((x-x0)**2 + (y-y0)**2)

    angles = np.where((y-y0) > 0, np.arccos((x-x0)/r), 2*np.pi-np.arccos((x-x0)/r))

    mask = np.argsort(angles)

    x_sorted = x[mask]
    y_sorted = y[mask]

    if return_origin:
        return x_sorted, y_sorted, x0, y0

    return x_sorted, y_sorted

def get_angles(x, y, x0=None, y0=None):
    """
    Get the angles of the trajectory.
    
    :param x: x coordinates
    :param y: y coordinates
    :param x0: x coordinate of the origin
    :param y0: y coordinate of the origin
    """

    if x0 is None:
        x0 = np.mean(x)
    if y0 is None:
        y0 = np.mean(y)

    r = np.sqrt((x-x0)**2 + (y-y0)**2)

    angles = np.where((y-y0) > 0, np.arccos((x-x0)/r), 2*np.pi-np.arccos((x-x0)/r))

    return angles

def get_interpolation(img, no_preprocessing=True, return_origin=False, scaled=False, method="distance"):
    """
    Get the interpolation function of the trajectory of the agent in the environment.

    :param no_preprocessing: if True, the trajectory is not preprocessed
    :param return_origin: if True, the origin is returned
    :param scaled: if True, the coordinates are scaled
    :param method: if "angle", the angles are used, if "distance", the distance from starting point is used

    :return: np.array
    """

    # https://github.com/duckietown/dt-core/blob/daffy/packages/complete_image_pipeline/include/complete_image_pipeline/calibrate_extrinsics.py
    # https://github.com/duckietown/dt-core/blob/daffy/packages/complete_image_pipeline/include/image_processing/rectification.py

    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    if LOW_RES:
        hsv_color1_yellow = np.array([30,35,187])
        hsv_color2_yellow = np.array([46,90,255])
    else:
        hsv_color1_yellow = np.array([30,70,170])
        hsv_color2_yellow = np.array([40,250,250])
        
    mask_yellow = cv2.inRange(img_hsv, hsv_color1_yellow, hsv_color2_yellow)

    x_all, y_all = np.nonzero(mask_yellow)
    x, y = x_all, y_all

    x_sorted, y_sorted, x0, y0 = sort_xy(x, y, return_origin=True)


    if method == "angle":
        # Interpolation angle-based
        angles = get_angles(x_sorted, y_sorted, x0=x0, y0=y0)
        # Add first and last point
        spline_input = np.concatenate([[0], angles, [2*np.pi]])
        x_sorted = np.concatenate([[x_sorted[-1]], x_sorted, [x_sorted[0]]])
        y_sorted = np.concatenate([[y_sorted[-1]], y_sorted, [y_sorted[0]]])
    elif method == "distance":
        # Interpolation distance-based
        points = np.array([x_sorted, y_sorted]).T
        distance = np.cumsum( np.sqrt(np.sum( np.diff(points, axis=0)**2, axis=1 )) )
        spline_input = np.insert(distance, 0, 0)/distance[-1]
    else:
        raise ValueError("Unknown method, must be 'angle' or 'distance'")

    s = 0.01

    spline_x = UnivariateSpline(spline_input, x_sorted, k=2, s=s)
    spline_y = UnivariateSpline(spline_input, y_sorted, k=2, s=s)

    splines = [spline_x, spline_y]

    samples = 300

    if method == "angle":
        alpha = np.linspace(0, 2*np.pi, samples)
    elif method == "distance":
        alpha = np.linspace(0, 1, samples)
    else:
        raise ValueError("Unknown method, must be 'angle' or 'distance'")

    points_fitted = np.vstack( [spl(alpha) for spl in splines] ).T

    return points_fitted


def resize_params(points_fitted):
    """
    Resize the parameters of the interpolation function.

    :param points_fitted:
    :return:
    """

    # MEMO for dumb kids: x is row [1] and y is column [0]

    max_left = np.min(points_fitted[:, 0])
    max_right = np.max(points_fitted[:, 0])
    max_bottom = np.min(points_fitted[:, 1])
    max_top = np.max(points_fitted[:, 1])

    print("MAX Y: {}".format(max_top))
    print("MAX X: {}".format(max_right))
    print("MIN Y: {}".format(max_bottom))
    print("MIN X: {}".format(max_left))

    long_side, short_side = 2.36, 1.77
    env_long_len, env_short_len = 2.925, 2.34
    env_long_border, env_short_border = (env_long_len-long_side)/2, (env_short_len-short_side)/2

    scale_x = short_side / (max_top - max_bottom)
    scale_y = long_side / (max_right - max_left)

    offset_x = max_bottom*scale_y - env_short_border
    offset_y = max_left*scale_x - env_long_border

    rospy.set_param('scale_y', float(scale_y))
    rospy.set_param('scale_x', float(scale_x))
    rospy.set_param('offset_y', float(offset_y))
    rospy.set_param('offset_x', float(offset_x))

    points_fitted_resized = points_fitted * np.array([scale_x, scale_y])
    # points_fitted_resized[:, 0] -= offset_x
    # points_fitted_resized[:, 1] -= offset_y

    return points_fitted_resized

def get_rectification_params(msg, rectify_alpha=0.0):
    """
    Callback for the camera_info topic, first step to rectification.

    :param msg: camera_info message
    """
    # create mapx and mapy
    H, W = msg.height, msg.width
    # create new camera info
    camera_model = PinholeCameraModel()
    camera_model.fromCameraInfo(msg)
    # find optimal rectified pinhole camera
    rect_K, _ = cv2.getOptimalNewCameraMatrix(
        camera_model.K, camera_model.D, (W, H), rectify_alpha
    )
    # create rectification map
    _mapx, _mapy = cv2.initUndistortRectifyMap(
        camera_model.K, camera_model.D, None, rect_K, (W, H), cv2.CV_32FC1
    )
    return _mapx, _mapy

def white_balance(img):
    result = cv2.cvtColor(img, cv2.COLOR_RGB2LAB)
    avg_a = np.average(result[:, :, 1])
    avg_b = np.average(result[:, :, 2])
    result[:, :, 1] = result[:, :, 1] - ((avg_a - 128) * (result[:, :, 0] / 255.0) * 1.1)
    result[:, :, 2] = result[:, :, 2] - ((avg_b - 128) * (result[:, :, 0] / 255.0) * 1.1)
    result = cv2.cvtColor(result, cv2.COLOR_LAB2RGB)
    return result

def process_map():
    msg = rospy.wait_for_message("/watchtower00/camera_node/camera_info", CameraInfo)
    print("[GetMap]: Got camera info")
    _mapx, _mapy = get_rectification_params(msg)
    ros_data = rospy.wait_for_message("/watchtower00/camera_node/image/compressed", CompressedImage)
    np_arr = np.frombuffer(ros_data.data, 'u1')
    img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
    # Rectify image
    image_rect = cv2.remap(img, _mapx, _mapy, cv2.INTER_NEAREST)
    print("[GetMap]: Remapped")
    img_wb = white_balance(image_rect)
    print("[GetMap]: White balanced")
    W, H = img_wb.shape[1], img_wb.shape[0]
    img_cutted = img_wb[int(H*0.15):int(H*0.78), int(W*0.2):int(W*0.8)]
    print("[GetMap]: Cutted")
    res = get_interpolation(img_cutted, no_preprocessing=True, method="distance")
    print(list(res.reshape(-1)))
    print("[GetMap]: Interpolation done")
    res_resized = resize_params(res)
    print("[GetMap]: Resized")
    res_flipped = res_resized
    # res_flipped[:,0] = res_resized[:,0].max() - res_resized[:,0]
    # print("[GetMap]: Flipped")
    return res_flipped.reshape(-1).astype(float).tolist()

def get_map_server():
    """
    Compute the map only the first time, than publish it using mudp.
    """
    if not map_data:
        rospy.init_node("send_map")
        print("[GetMap]: Starting map server")
        if LOW_RES:
            rospy.set_param("/watchtower00/camera_node/res_h", 324)
            rospy.set_param("/watchtower00/camera_node/res_w", 432)
            while rospy.get_param("/watchtower00/camera_node/res_h") != 324:
                rospy.sleep(0.1)
        print("[GetMap]: Low resolution set")
        map = process_map()
        print(map)
        print("[GetMap]: Map computed")
    else:
        map = map_data
        print("[GetMap]: Using stored map")
    publisher = group.Publisher()
    msg = Floats(map)
    while not rospy.is_shutdown():
        publisher.publish(msg)
        rospy.sleep(2)

if __name__ == "__main__":
    get_map_server()